<html>
<head>

<!-- Allowable url parameters: characterID, thickness, image, canvasWidth, canvasSize, 
canvasHeight, globalWidth, globalHeight, globalImageWidth, globalImageHeight, 
globalCanvasWidth, globalCanvasHeight, globalCanvasSize, imageWidth, imageHeight, noscaling, 
sampleCount, orientation (horizontal or vertical), globalLineWidth, randomize, 
characterOrder (ColumnFirst | RowFirst), numRows, numCols, numColumns, checkAll, alertStyle, 
alertBorderStyle, alertBorderColor, alertBorderWidth, askSeenBefore, askInputDevice, askFeedback  -->
<!--  -->

<meta name="Keywords" content="character, alphabet, write, draw, handwriting, handwrite" /> 
<meta name="Description" content="This is a form to gather handwriting samples of characters you may or may not have seen before." /> 
<meta name="Allowable url parameters" content="Allowable url parameters: characterID, thickness, image, canvasWidth, canvasSize, 
canvasHeight, globalWidth, globalHeight, globalImageWidth, globalImageHeight, 
globalCanvasWidth, globalCanvasHeight, globalCanvasSize, imageWidth, imageHeight, noscaling, 
sampleCount, orientation (horizontal or vertical), globalLineWidth, randomize, 
characterOrder (ColumnFirst | RowFirst), numRows, numCols, numColumns, checkAll, alertStyle, 
alertBorderStyle, alertBorderColor, alertBorderWidth, askSeenBefore, askInputDevice, askFeedback" />


<style type="text/css">
#canvascontrols #clear {
  color: red;
  text-decoration: none;
  font-weight: bold;
  font-size: 16px;
  padding: 0 5px 1px 20px;
  margin-left: 0px;
  background: url(delete.png) no-repeat 2px 1px;
  border: 1px solid gray;
  -webkit-border-bottom-right-radius: 10px;
  -moz-border-radius-bottomright: 10px;
  border-bottom-right-radius: 10px;
  -webkit-border-bottom-left-radius: 10px;
  -moz-border-radius-bottomleft: 10px;
  border-bottom-left-radius: 10px;
}
#canvascontrols #undo {
  color: gray;
  text-decoration: none;
  font-weight: bold;
  font-size: 16px;
  padding: 0 5px 1px 20px;
  margin-left: 0px;
  background: url(undo-gray.png) no-repeat 2px 1px;
  border: 1px solid gray;
  -webkit-border-bottom-right-radius: 10px;
  -moz-border-radius-bottomright: 10px;
  border-bottom-right-radius: 10px;
  -webkit-border-bottom-left-radius: 10px;
  -moz-border-radius-bottomleft: 10px;
  border-bottom-left-radius: 10px;
}

#canvascontrols #redo {
  color: gray;
  text-decoration: none;
  font-weight: bold;
  font-size: 16px;
  padding: 0 5px 1px 20px;
  margin-left: 0px;
  background: url(redo-gray.png) no-repeat 2px 1px;
  border: 1px solid gray;
  -webkit-border-bottom-right-radius: 10px;
  -moz-border-radius-bottomright: 10px;
  border-bottom-right-radius: 10px;
  -webkit-border-bottom-left-radius: 10px;
  -moz-border-radius-bottomleft: 10px;
  border-bottom-left-radius: 10px;
}

canvas {
  border: 1px solid black;
}

img#character {
  width: 400px;
}

div.table {
  float: left;
  border: 1px solid black;
}

div.feedback {
  float: left;
}

</style>

<script type="text/javascript" id="library">
String.prototype.trim = function() { return this.replace(/^\s\s*/, '').replace(/\s\s*$/, ''); }
</script>

<script type="text/javascript" id="defaults">
//==========================================================
//Constants
var ROWS_FIRST = 0;
var COLS_FIRST = 1;
var HEIGHT = 0;
var WIDTH = 1;
//End Constants
//==========================================================
//Change default values here
var lineWidth = 5;
var imageSize = 'fitHeight';
var canvasWidth = 'fit';
var canvasHeight = 'fit';
var lineCap = 'butt';
var sampleCount = 1;
var _isHorizontal = false;
//var numRows = 3;
//var numCols = null;
//var characterOrder = ROWS_FIRST;
var alertStyle = null;
var alertBorderWidth = 'thick';
var alertBorderColor = 'red';
var alertBorderStyle = 'solid';
var randomizeOrder = true;
var checkAll = true;
var askFeedback = true;
var askInputDevice = true;
var askSeenBefore = true;

var backupCanvasHeight = '200px';
var backupCanvasWidth = '300px';
var defaultFallBackDimen = HEIGHT;

function defaultFeedbackString() { return 'Please enter any feedback you have here.'; }

//End default values
//==========================================================

function setLineWidth(newWidth) { lineWidth = newWidth; }
function getLineWidth() { return lineWidth; }

function setCanvasWidth(newWidth) { canvasWidth = (newWidth.toLowerCase() != 'fit' ? newWidth : 'fit'); }
function getCanvasWidth() { return canvasWidth; }

function setCanvasHeight(newHeight) { canvasHeight = (newHeight.toLowerCase() != 'fit' ? newHeight : 'fit'); }
function getCanvasHeight() { return canvasHeight; }

function setLineCap(newCap) { lineCap = newCap; }
function getLineCap() { return lineCap; }


function toBool(value, nullValue)
{
  if (nullValue === undefined) nullValue = null;
  if (value === true || value === false) return value;
  value = value.toLowerCase();
  value = value.trim();
  if (value.charAt(0) == 'f' || value.charAt(0) == '0') return false;
  if (value.charAt(0) == 't' || value.charAt(0) == '1') return true;
  return nullValue;
}

</script>


<script type="text/javascript" id="url_parameters">
//=============================================================
// From http://www.netlobo.com/url_query_string_javascript.html
function getURLParameter( name, ignoreCase)
{
  if (ignoreCase === undefined) ignoreCase = true;
  name = name.replace(/[\[]/,"\\\[").replace(/[\]]/,"\\\]");
  var regexS = "[\\?&]"+name+"=([^&#]*)";
  var regex = new RegExp( regexS, (ignoreCase ? 'i' : ''));
  var results = regex.exec( window.location.href );
  if( results == null )
    return '';
  else
    return results[1];
}
function hasURLParameter( name, ignoreCase )
{
  if (ignoreCase === undefined) ignoreCase = true;
  name = name.replace(/[\[]/,"\\\[").replace(/[\]]/,"\\\]");
  var regexS = "[\\?&]"+name+"([&#])";
  var regex = new RegExp( regexS, (ignoreCase ? 'i' : ''));
  var results = regex.exec( window.location.href+'#' );
  return ( results != null );
}

//=============================================================
</script>

<script type="text/javascript">
if (getURLParameter('thickness') != '')
  setLineWidth(getURLParameter('thickness'));
  
if (getURLParameter('sampleCount') != '')
  setSampleCount(getURLParameter('sampleCount'));
  
if (getURLParameter('globalLineWidth') != '')
  setLineWidth(parseFloat(getURLParameter('globalLineWidth')));


  
if (getURLParameter('orientation') != '') {
  orient = getURLParameter('orientation').toLowerCase()
  if (orient == '0') // horizontal
    setHorizontal();
  else if (orient == '1') // vertical
    setVertical();
  else if (orient.charAt(0) == 'h') // horizontal
    setHorizontal();
  else if (orient.charAt(0) == 'v') // horizontal
    setVertical();
}

if (getURLParameter('alertStyle') != '') setAlertStyle(getURLParameter('alertStyle'));
if (getURLParameter('alertBorderWidth') != '') setAlertBorderWidth(getURLParameter('alertBorderWidth'));
if (getURLParameter('alertBorderStyle') != '') setAlertBorderStyle(getURLParameter('alertBorderStyle'));
if (getURLParameter('alertBorderColor') != '') setAlertBorderColor(getURLParameter('alertBorderColor'));

if (getURLParameter('globalWidth') != '' || getURLParameter('globalHeight') != '' || 
    getURLParameter('globalImageHeight') != '' || getURLParameter('globalImageWidth') != '')
   setImageSize('');

if (getURLParameter('globalWidth') != '') {
  if (getURLParameter('globalImageWidth') == '') 
    setImageSize(getImageSize()+' width="'+getURLParameter('globalWidth')+'"');
  setCanvasWidth(getURLParameter('globalWidth'));
}

if (getURLParameter('globalHeight') != '') {
  if (getURLParameter('globalImageHeight') == '') 
    setImageSize(getImageSize()+' height="'+getURLParameter('globalHeight')+'"');
  setCanvasHeight(getURLParameter('globalHeight'));
}

if (getURLParameter('globalImageWidth') != '')
  setImageSize(getImageSize()+' width="'+getURLParameter('globalImageWidth')+'"');
if (getURLParameter('globalImageHeight') != '')
  setImageSize(getImageSize()+' height="'+getURLParameter('globalImageHeight')+'"');


if (getURLParameter('globalCanvasWidth') != '')
  setCanvasWidth(getURLParameter('globalCanvasWidth'));
if (getURLParameter('globalCanvasHeight') != '')
  setCanvasHeight(getURLParameter('globalCanvasHeight'));
if (getURLParameter('globalCanvasSize') != '') {
  setCanvasHeight(getURLParameter('globalCanvasSize'));
  setCanvasWidth(getURLParameter('globalCanvasSize'));
}
</script>

<script type="text/javascript" id="show-hide">
// from http://www.cssnewbie.com/showhide-content-css-javascript/
function showHide(shID) {
	if (document.getElementById(shID)) {
		if (document.getElementById(shID+'-show').style.display != 'none') {
			document.getElementById(shID+'-show').style.display = 'none';
			document.getElementById(shID).style.display = 'block';
		}
		else {
			document.getElementById(shID+'-show').style.display = 'inline';
			document.getElementById(shID).style.display = 'none';
		}
	}
}
</script>



<script type="text/javascript">
function paintCanvasWithStroke(canvas, strokes, lineWidth, lineCap) {
  var ctx = canvas.getContext('2d');
  
  if ( !(lineWidth === undefined) ) ctx.lineWidth = lineWidth;
  if ( lineCap === undefined ) lineCap = getLineCap();
  ctx.lineCap = lineCap;
  
  ctx.strokeStyle = "rgb(0, 0, 0)";
  ctx.clearRect(0, 0, canvas.width, canvas.height);
  for (var stroke_i = 0; stroke_i < strokes.length; stroke_i++) {
    var x = strokes[stroke_i][0].x; var y = strokes[stroke_i][0].y;
    
    ctx.fillRect(x-ctx.lineWidth/2, y-ctx.lineWidth/2, ctx.lineWidth, ctx.lineWidth);
    ctx.beginPath();
    ctx.moveTo(x, y);
    
    for (point_i = 0; point_i < strokes[stroke_i].length; point_i++) {
      point = strokes[stroke_i][point_i];
      last_x = x; last_y = y;
      x = point.x; y = point.y;
      ctx.lineTo(x, y);
      ctx.stroke();
    }    
  }
}

function makeCanvasMemoryful(canvas, strokes_name) {
  if (strokes_name === undefined) strokes_name = 'strokes';
  canvas.futureStrokes = [];
  
  canvas.canUndo = function () { return canvas[strokes_name].length > 0; };
  canvas.canRedo = function () { return canvas.futureStrokes.length > 0; };
  
  canvas.undo = function () {
    if (!canvas.canUndo()) throw 'Error: Attempt to undo canvas ' + canvas + ' failed; no state to undo.';
    canvas.futureStrokes.push(canvas[strokes_name].pop());
    paintCanvasWithStroke(canvas, canvas[strokes_name]);
    if (canvas[strokes_name].length == 0 && !(canvas.disableUndo === undefined)) canvas.disableUndo();
    if (!(canvas.enableRedo === undefined)) canvas.enableRedo();
  };
  
  canvas.redo = function () {
    if (!canvas.canRedo()) throw 'Error: Attempt to redo canvas ' + canvas + ' failed; no state to redo.';
    canvas[strokes_name].push(canvas.futureStrokes.pop());
    paintCanvasWithStroke(canvas, canvas[strokes_name]);
    if (canvas.futureStrokes.length == 0 && !(canvas.disableRedo === undefined)) canvas.disableRedo();
    if (!(canvas.enableUndo === undefined)) canvas.enableUndo();
  };
  
  canvas.clearFuture = function () {
    canvas.futureStrokes = [];
    if (!(canvas.disableRedo === undefined)) canvas.disableRedo();
  };
  
  canvas.clearPast = function () {
    canvas[strokes_name] = [];
    if (!(canvas.disableUndo === undefined)) canvas.disableUndo();
  };

  canvas.clearState = function () {
    canvas.clearFuture();
    canvas.clearPast();
  };
}

</script>


<script type="text/javascript">
//===================================================================
//Canvas Drawing - From http://detexify.kirelabs.org/js/canvassify.js
// make a canvas drawable and give the stroke to some function after each stroke
// better canvas.drawable({start: startcallback, stop: stopcallback, stroke: strokecallback})
function makeDrawable(canvas, lineWidth, undoLink, redoLink) {
  var ctx = canvas.getContext('2d');
  // Initilize canvas context values
  if (lineWidth === undefined) lineWidth = getLineWidth();
  ctx.lineWidth = lineWidth;
  ctx.lineCap = getLineCap();
  //end initilization
  var draw = false;
  var current_stroke;
  canvas.strokes = [];
  var point = function(x,y) {
    return {"x":x, "y":y, "t": (new Date()).getTime()};
  }
  var start = function(evt) {
    draw = true;
    var x,y;
    var coords = getMouseCoordsWithinTarget(evt);
    x = coords.x;
    y = coords.y;
    ctx.fillRect(x-ctx.lineWidth/2, y-ctx.lineWidth/2, ctx.lineWidth, ctx.lineWidth);
    ctx.beginPath();
    ctx.moveTo(x, y);
    current_stroke = [point(x,y)];
  // initialize new stroke
  }
  var stroke = function(evt) {
    if (draw) {
      var coords = getMouseCoordsWithinTarget(evt);
      ctx.lineTo(coords.x, coords.y);
      ctx.stroke();
      current_stroke.push(point(coords.x, coords.y));
    }
  }
  var stop = function(evt) {
    if (draw) {
      canvas.strokes.push(current_stroke);
      draw = false;
      canvas.clearFuture();
      if (!(canvas.enableUndo === undefined)) canvas.enableUndo();
    }
  }
  // canvas addons
  makeCanvasMemoryful(canvas, 'strokes');

  canvas.clear = function() {
    canvas.clearState();
    ctx.strokeStyle = "rgb(0, 0, 0)";
    ctx.clearRect(0, 0, canvas.width, canvas.height);
  }
  canvas.clear();
  // addeventlistener
  canvas.onmousedown = function(evt) {start(evt);};
  canvas.onmousemove = function(evt) {stroke(evt);};
  canvas.onmouseup = function(evt) {stop(evt);};
  canvas.onmouseout = function(evt) {stop(evt);};
  
  if (!(undoLink === undefined)) {
    canvas.disableUndo = function () { 
      undoLink.style.color = 'gray'; 
      undoLink.style.background = 'url(undo-gray.png) no-repeat 2px 1px'; 
      undoLink.onclick = function () {return false;};
    };
    canvas.enableUndo = function () {
      undoLink.style.color = 'blue'; 
      undoLink.style.background = 'url(undo.png) no-repeat 2px 1px'; 
      undoLink.onclick = function () {return true;};
    };
  }
  
  if (!(redoLink === undefined)) {
    canvas.disableRedo = function () { 
      redoLink.style.color = 'gray';
       redoLink.style.background = 'url(redo-gray.png) no-repeat 2px 1px'; 
       redoLink.onclick = function () {return false;};
     };
    canvas.enableRedo = function () { 
      redoLink.style.color = 'blue'; 
      redoLink.style.background = 'url(redo.png) no-repeat 2px 1px'; 
      redoLink.onclick = function () {return true;};
    };
  }
  
  //canvas.init();
  return canvas;  
}
//===================================================================


//===================================================================
//From http://skuld.bmsc.washington.edu/~merritt/gnuplot/canvas_demos/
function getMouseCoordsWithinTarget(event)
{
	var coords = { x: 0, y: 0};

	if(!event) // then we're in a non-DOM (probably IE) browser
	{
		event = window.event;
		if (event) {
			coords.x = event.offsetX;
			coords.y = event.offsetY;
		}
	}
	else		// we assume DOM modeled javascript
	{
		var Element = event.target ;
		var CalculatedTotalOffsetLeft = 0;
		var CalculatedTotalOffsetTop = 0 ;

		while (Element.offsetParent)
 		{
 			CalculatedTotalOffsetLeft += Element.offsetLeft ;     
			CalculatedTotalOffsetTop += Element.offsetTop ;
 			Element = Element.offsetParent ;
 		}

		coords.x = event.pageX - CalculatedTotalOffsetLeft ;
		coords.y = event.pageY - CalculatedTotalOffsetTop ;
	}

	return coords;
}
//===================================================================


</script>



<script type="text/javascript" id="character_input_maker">
makeD = function() { makeDrawable(document.getElementById('drawing_canvas'), undefined, document.getElementById('undo'), document.getElementById('redo')); };
if (window.attachEvent) {window.attachEvent('onload', function(){makeD();});}
else if (window.addEventListener) {window.addEventListener('load', function(){makeD();}, false);}
else {document.addEventListener('load', function(){makeD();}, false);}
</script>

</head>
<body> 

<table>
<tbody>
<tr>
<td>
<div>
<canvas id="drawing_canvas" unselectable="on" width="200px" height="200px">
Your browser must support the &lt;canvas&gt; element in order to use this site.
Please use another browser, such as Google Chrome or Mozilla Firefox.
</canvas></div>
<div id="canvascontrols"> <a id="clear" href="javascript:drawing_canvas.clear()" unselectable="on">clear</a>
<a id="undo" name="undo1" href="javascript:document.getElementById('drawing_canvas').undo()" unselectable="on">undo</a>
<a id="redo" href="javascript:document.getElementById('drawing_canvas').redo()" unselectable="on">redo</a>
</div>
</td>


<td>
<div>
<canvas id="showing_canvas" unselectable="on" width="200px" height="200px">
Your browser must support the &lt;canvas&gt; element in order to use this site.
Please use another browser, such as Google Chrome or Mozilla Firefox.
</canvas></div>
<div id="canvascontrols"> <a id="clear" href="javascript:document.getElementById('showing_canvas').clear()" unselectable="on">clear</a>
</div>
</td>
</tr>
</tbody>
</table>
</body>

</html>